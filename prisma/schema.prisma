generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  image         String?
  email         String?       @unique
  emailVerified DateTime?
  sessions      Session[]
  accounts      Account[]
  role          UserRole      @default(LOANEE)
  applications  Application[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Lender {
  id         String @id @default(cuid())
  name       String
  business   String
  phone      String
  investment String
  email      String
  province   String
}

model Application {
  id                    String               @id @default(cuid())
  userId                String
  type                  ApplicationType      @default(GENERAL)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  status                LoanStatus           @default(PROCESSING)
  hasBankruptcy         Boolean
  firstName             String
  lastName              String
  currentAddress        String
  yearsAtCurrentAddress Int
  housingStatus         HousingStatus
  housingPayment        Decimal              @db.Decimal(10, 2) // 8 digits before decimal, 2 after
  dateOfBirth           DateTime
  maritalStatus         MaritalStatus
  residencyStatus       ResidencyStatus
  personalPhone         String
  employmentStatus      EmploymentStatus
  grossIncome           Decimal              @db.Decimal(12, 2) // 10 digits before decimal, 2 after
  workplaceName         String
  workplaceAddress      String
  workplacePhone        String
  workplaceEmail        String
  loanAmount            Decimal              @db.Decimal(12, 2) // 10 digits before decimal, 2 after
  // Fields for general loans
  generalEducationLevel EducationLevel?
  generalFieldOfStudy   String?
  // Fields for mortgage loans
  mortgageBusinessPhone String?
  mortgagePurpose       MortgagePurpose?
  mortgageType          MortgageType?
  mortgageHousingType   MortgageHousingType?
  mortgageDownPayment   MortgageDownPayment?
  // Related models
  documents             Document[]
  messages              Message[]
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Document {
  id            String         @id @default(cuid())
  application   Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
  documentType  DocumentType
  fileUrl       String?
  fileKey       String?
  fileType      String?
  fileName      String?
  uploadedAt    DateTime       @default(now())
  status        DocumentStatus @default(PENDING)
}

model Message {
  id            String      @id @default(cuid())
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
  content       String
  senderId      String
  senderRole    UserRole
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum UserRole {
  LOANEE @map("1")
  LENDER @map("2")
  ADMIN  @map("3")
}

enum ApplicationType {
  GENERAL  @map("1")
  MORTGAGE @map("2")
}

enum HousingStatus {
  RENT @map("1")
  OWN  @map("2")
}

enum ResidencyStatus {
  CITIZEN            @map("1")
  PERMANENT_RESIDENT @map("2")
  WORK_PERMIT        @map("3")
  STUDENT_VISA       @map("4")
  OTHER              @map("50")
}

enum EmploymentStatus {
  FULL_TIME     @map("1")
  PART_TIME     @map("2")
  CONTRACT      @map("3")
  SEASONAL      @map("4")
  SELF_EMPLOYED @map("5")
  OTHER         @map("50")
}

enum MortgagePurpose {
  BUYING     @map("1")
  REPAIR     @map("2")
  RENOVATION @map("3")
}

enum MortgageType {
  REFINE     @map("1")
  EQUITY     @map("2")
  BRIDGE     @map("3")
  FIRST_TIME @map("4")
}

enum MortgageHousingType {
  CONDO        @map("1")
  APARTMENT    @map("2")
  DUPLEX       @map("3")
  TOWNHOUSE    @map("4")
  DETACHED     @map("5")
  SEMIDETACHED @map("6")
  CONTAINER    @map("7")
  MOBILE       @map("8")
  BUNGALOW     @map("9")
  OTHER        @map("50")
}

enum LoanStatus {
  PROCESSING  @map("1") // admin processing the application
  REJECTED    @map("2") // admin rejected the application
  PROGRESSING @map("3") // admin accepted the application, and it's on loan pool
  ACCEPTED    @map("4") // loanee accepted the application
  ARCHIVED    @map("5") // loanee has processed the application, and it's archived
}

enum DocumentType {
  IDENTITY_PROOF    @map("1")
  INCOME_PROOF      @map("2")
  EMPLOYMENT_LETTER @map("3")
  TAX_RETURN        @map("4")
  BANK_STATEMENT    @map("5")
  PROPERTY_DOCUMENT @map("6")
  OTHER             @map("50")
}

enum DocumentStatus {
  PENDING  @map("1") // document not uploaded by loanee
  UPLOADED @map("2") // document uploaded by loanee
  APPROVED @map("3") // document approved by admin
  REJECTED @map("4") // document rejected by admin
}

enum MaritalStatus {
  SINGLE   @map("1")
  MARRIED  @map("2")
  DIVORCED @map("3")
  WIDOWED  @map("4")
  OTHER    @map("50")
}

enum EducationLevel {
  HIGH_SCHOOL   @map("1")
  COLLEGE       @map("2")
  UNIVERSITY    @map("3")
  POST_GRADUATE @map("4")
  OTHER         @map("50")
}

enum MortgageDownPayment {
  FIVE    @map("5")
  TEN     @map("10")
  FIFTEEN @map("15")
  TWENTY  @map("20")
  MORE    @map("more")
}
