generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  image         String?
  email         String?   @unique
  emailVerified DateTime?
  sessions      Session[]
  accounts      Account[]
  role          UserRole  @default(LOANEE)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Lender {
  id         String @id @default(cuid())
  name       String
  business   String
  phone      String
  investment String
  email      String
  province   String
}

enum UserRole {
  LOANEE @map("loanee")
  LENDER @map("lender")
  ADMIN  @map("admin")
}

model MortgageApplication {
  id                String                @id @default(cuid())
  userId            String
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  isAdult           Boolean
  hasBankruptcy     Boolean
  firstName         String
  lastName          String
  currentAddress    String
  residencyDuration Int
  housingStatus     HousingStatus
  housingPayment    Decimal
  canadianStatus    CanadianStatus
  employmentStatus  EmploymentStatus
  grossIncome       Decimal
  workplaceName     String
  workplacePhone    String
  workplaceEmail    String
  loanAmount        Decimal?
  loanPurpose       LoanPurpose?
  mortgageType      MortgageType?
  housingType       HousingType?
  downPayment       Decimal?
  status            LoanStatus            @default(PROCESSING)
  documents         ApplicationDocument[]
}

model ApplicationDocument {
  id                  String              @id @default(cuid())
  mortgageApplication MortgageApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId       String
  documentType        DocumentType
  fileUrl             String?
  fileType            String?
  fileName            String?
  uploadedAt          DateTime            @default(now())
  status              DocumentStatus      @default(PENDING)
}

enum HousingStatus {
  rent
  own
}

enum CanadianStatus {
  citizen
  permanentResident
  temporaryResident
  other
}

enum EmploymentStatus {
  fullTime
  partTime
  contract
  seasonal
  selfEmployed
  other
}

enum LoanPurpose {
  buying
  repair
  renovation
}

enum MortgageType {
  refinance
  equity
  bridge
  firsttime
}

enum HousingType {
  condo
  apartment
  duplex
  townhouse
  detached
  semidetached
  container
  mobile
  bungalow
  other
}

enum LoanStatus {
  PROCESSING  @map("processing")
  REJECTED    @map("rejected")
  VERIFIED    @map("verified")
  PROGRESSING @map("progressing")
  ACCEPTED    @map("accepted")
  ARCHIVED    @map("archived")
}

enum DocumentType {
  IDENTITY_PROOF
  INCOME_PROOF
  EMPLOYMENT_LETTER
  TAX_RETURN
  BANK_STATEMENT
  PROPERTY_DOCUMENT
  OTHER
}

enum DocumentStatus {
  PENDING  @map("pending")
  APPROVED @map("approved")
  REJECTED @map("rejected")
}
